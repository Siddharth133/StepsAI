Objective:

The objective of this assessment is to assess your ability to extract content from selected textbooks, create a hierarchical tree-based index for multi-document/topic/section-based RAG, and develop a question-answering system using an LLM (Language Model). The assessment will evaluate your skills in data extraction, data processing, hierarchical tree-based indexing, retrieval techniques, and natural language processing.



Task Description:

Textbook Selection and Content Extraction:

Select any three textbooks, each with more than 300 pages, for content extraction. 

Extract the content from the selected textbooks thoroughly, ensuring that all relevant text is captured. 



Hierarchical Tree-based Indexing: 

Analyze the structure of the textbooks and identify the hierarchical organization of the content (e.g., chapters, sections, subsections). 

Based on the identified structure, create a hierarchical tree-based index for each textbook. 

The hierarchical tree should capture the following elements:

  Root Node: Represents the entire textbook. 

  Intermediate Nodes: Represent chapters, sections, and subsections, categorizing the content into meaningful groups. 

  Leaf Nodes: Contain the actual text content, divided into appropriate chunks or paragraphs. 

Assign unique identifiers to each node in the tree, establishing parent-child relationships between the nodes. 

The hierarchical tree-based index should be stored in a suitable data structure or database for efficient retrieval.



Retrieval Techniques:

Implement query expansion techniques to enhance the retrieval process. This may include techniques such as synonym expansion, stemming, or leveraging external knowledge bases to expand the query terms.

Hybrid retrieval methods should be employed, combining BM25 (Best Match 25) and BERT/bi-encoder based retrieval methods such as DPR (Dense Passage Retrieval) and SPIDER (Semantic Passage Retrieval).

Experiment with different retrieval strategies and evaluate their effectiveness in retrieving relevant content from the hierarchical tree-based indexes.

The retrieved data should be re-ranked based on relevance and similarity to the query using appropriate ranking algorithms.



Multi-document/Topic/Section-based RAG:

Develop a Retrieval Augmented Generation (RAG) system that leverages the hierarchical tree-based indexes of the textbooks.

Given a user query, the RAG system should:

  Identify the relevant documents (textbooks) based on the query using the implemented retrieval techniques.

  Traverse the hierarchical tree-based indexes of the relevant documents to retrieve the most pertinent sections or chunks of text.

  Utilize the retrieved content to generate an informative and coherent response to the user query.

Implement appropriate retrieval and ranking algorithms to select the most relevant content from the hierarchical tree-based indexes.



Question Answering:

The retrieved content from the multi-document/topic/section-based RAG system should be passed to an LLM (Language Model) of your choice for question answering.

The LLM should generate accurate and relevant answers based on the retrieved content from the hierarchical tree-based indexes.



User Interface (Optional but Appreciated):

Create a user interface using frameworks like Streamlit or Gradio to demonstrate the functionality of the developed system.

The user interface should allow users to input queries and display the retrieved answers along with the relevant textbook titles, chapters, and sections.



Evaluation Criteria:

Appropriateness of the selected textbooks (minimum 300 pages each) and the completeness and accuracy of content extraction.

Effectiveness of the hierarchical tree-based indexing approach in capturing the structure and organization of the textbooks.

Quality and effectiveness of the implemented retrieval techniques, including query expansion and hybrid retrieval methods (BM25, DPR, SPIDER).

Relevance and accuracy of the re-ranking algorithms used to prioritize the retrieved content.

Quality of the multi-document/topic/section-based RAG system, including the retrieval and ranking algorithms.

Accuracy and relevance of the answers generated by the LLM based on the retrieved content from the hierarchical tree-based indexes.

Overall system performance and efficiency.

(Optional) User interface design and user experience.



Submission Guidelines:

Submit the source code for the content extraction, hierarchical tree-based indexing, retrieval techniques, multi-document/topic/section-based RAG, and question answering components in their respective GitHub repositories.

A detailed README file should be provided, explaining the setup instructions, dependencies, and how to run the system.

The README file should also include the titles and links to the selected textbooks used for content extraction.

If a user interface is developed, instructions on how to access and use the interface should be included.

The GitHub repository link should be shared by replying to the assessment invite email.



Note: Please use the Python programming language and leverage relevant libraries and frameworks for content extraction, hierarchical tree-based indexing, retrieval techniques, and LLM integration.



Deadline:

The assessment should be completed and submitted within 11 days from the date of receiving the email.



Resources:

Research Papers:

  "Enhancing Hierarchical Tree Structures with Memory-Based Indexing in Retrieval Augmented Generation" by Clappy.AI

  "Using Document Layout Structure for Efficient RAG" by Ambika Sukla

Relevant Python libraries: NLTK, Gensim, Transformers, PyPDF2 (for PDF extraction), Pyserini (for BM25), Sentence-Transformers (for bi-encoder retrieval), etc.